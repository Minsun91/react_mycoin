{"version":3,"sources":["api.tsx","routes/Price.tsx","routes/Chart.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.tsx","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","Price","coinId","useQuery","fetchPriceHistory","isLoading","data","type","series","x","map","price","parseFloat","close","y","options","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","formatter","value","toFixed","Chart","Math","floor","Date","now","fetchCoinHistory","name","Title","styled","h1","props","accentColor","Loader","span","Container","div","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","Coin","useParams","state","useLocation","priceMatch","useMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickerLoading","tickersData","loading","Helmet","rank","symbol","quotes","USD","description","total_supply","max_supply","to","path","element","CoinsList","ul","li","Img","img","Coins","slice","coin","id","src","toLowerCase","Router","process","darktheme","bgColor","lighttheme","GlobalStyle","createGlobalStyle","ThemeSwitchBtn","button","App","useState","setTheme","onClick","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.82cb7bb2.chunk.js","sourcesContent":["// export async function fetchCoins (){\n//     const response = await fetch(\n//         \"https://api.coinpaprika.com/v1/coins\"\n//     );\n//     const json = await response.json();\n//     return json;\n\nimport { isRouteErrorResponse } from \"react-router-dom\";\n\n// }\nconst BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n    return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId:string) {\n    return fetch(`${BASE_URL}/coins/${coinId}`).then((response) => response.json());\n}\n\nexport function fetchCoinTickers(coinId:string) {\n    return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) => response.json());\n}\n\nexport function fetchCoinHistory (coinId:string){\n    const endDate = Math.floor(Date.now()/1000);\n    const startDate = endDate - 60 * 60 * 23 * 7 * 1; //a week ago\n    return fetch(`https://ohlcv-api.nomadcoders.workers.dev/?coinId=${coinId}`).then((response) => response.json());\n}\n\nexport function fetchPriceHistory (coinId:string) {\n     \n    return fetch(`https://ohlcv-api.nomadcoders.workers.dev/?coinId=${coinId}`).then((response)=>response.json());\n}","import ApexChart from \"react-apexcharts\";\nimport { useQuery } from \"react-query\";\nimport { fetchPriceHistory } from \"../api\";\n\ninterface PriceProps {\n    coinId: string;\n}\n\ninterface IHistorical {\n    time_open: number;\n    time_close: number;\n    open: string;\n    high: string;\n    low: string;\n    close: string;\n    volume: string;\n    market_cap: number;\n}\n\nfunction Price({ coinId }: PriceProps) {\n    const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\n    fetchPriceHistory(coinId)\n    );\n    return (\n        <div>\n            {isLoading ? (\n                \"Loading chart...\"\n            ) : (\n                <ApexChart\n                    type=\"candlestick\"\n                    series={[\n                        {\n                            data: [{\n                                x: data?.map((price) => parseFloat(price.close)) ??\n                                [],\n                                y: data?.map((price) => parseFloat(price.close)) ??\n                                []\n                              }]\n                        }\n                    ]}\n                    options={{\n                        theme: {\n                            mode: \"dark\",\n                        },\n                        chart: {\n                            height: 300,\n                            width: 500,\n                            toolbar: {\n                                show: false,\n                            },\n                            background: \"transparent\",\n                        },\n                        grid: { show: false },\n                        stroke: {\n                            curve: \"smooth\",\n                            width: 4,\n                        },\n                        yaxis: {\n                            show: false,\n                        },\n                        xaxis: {\n                            axisBorder: { show: false },\n                            axisTicks: { show: false },\n                            labels: { show: false },\n                            categories:data?.map((price) => price.time_close) ??\n                            [],\n                        },\n                        fill: {\n                            type: \"gradient\",\n                            gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\n                        },\n                        colors: [\"#0fbcf9\"],\n                        tooltip: {\n                            y: {\n                              formatter: (value) => `$${value.toFixed(2)}`,\n                            },\n                        }\n                    }}\n                />\n            )}\n        </div>\n    );\n}\nexport default Price;\n","import ApexChart from \"react-apexcharts\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\n\ninterface ChartProps {\n    coinId: string;\n}\n\ninterface IHistorical {\n    time_open: number;\n    time_close: number;\n    open: string;\n    high: string;\n    low: string;\n    close: string;\n    volume: string;\n    market_cap: number;\n}\n\nfunction Chart({ coinId }: ChartProps) {\n    const { isLoading, data } = useQuery<IHistorical[]>([\"ohlcv\", coinId], () =>\n        fetchCoinHistory(coinId)\n    );\n    return (\n        <div>\n            {isLoading ? (\n                \"Loading chart...\"\n            ) : (\n                <ApexChart\n                    type=\"line\"\n                    series={[\n                        {\n                            name: \"Price\",\n                            data:\n                                data?.map((price) => parseFloat(price.close)) ??\n                                [],\n                        },\n                    ]}\n                    options={{\n                        theme: {\n                            mode: \"dark\",\n                        },\n                        chart: {\n                            height: 300,\n                            width: 500,\n                            toolbar: {\n                                show: false,\n                            },\n                            background: \"transparent\",\n                        },\n                        grid: { show: false },\n                        stroke: {\n                            curve: \"smooth\",\n                            width: 4,\n                        },\n                        yaxis: {\n                            show: false,\n                        },\n                        xaxis: {\n                            axisBorder: { show: false },\n                            axisTicks: { show: false },\n                            labels: { show: false },\n                            categories:data?.map((price) => price.time_close) ??\n                            [],\n                        },\n                        fill: {\n                            type: \"gradient\",\n                            gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\n                        },\n                        colors: [\"#0fbcf9\"],\n                        tooltip: {\n                            y: {\n                              formatter: (value) => `$${value.toFixed(2)}`,\n                            },\n                        }\n                    }}\n                />\n            )}\n        </div>\n    );\n}\nexport default Chart;\n","// import { useEffect, useState } from \"react\";\nimport { useLocation, useParams } from \"react-router\";\nimport { Route, Routes, Link, useMatch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Price from \"./Price\";\nimport Chart from \"./Chart\";\nimport Coins from \"./Coins\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport { Helmet } from \"react-helmet\";\nimport { HelmetProvider } from \"react-helmet-async\";\n\nconst Title = styled.h1`\n    font-size: 48px;\n    color: ${(props) => props.theme.accentColor};\n`;\nconst Loader = styled.span`\n    text-align: center;\n    display: block;\n`;\nconst Container = styled.div`\n    padding: 0px 20px;\n    max-width: 480px;\n    margin: 0 auto;\n`;\nconst Header = styled.header`\n    height: 15vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst Overview = styled.div`\n    display: flex;\n    justify-content: space-between;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding: 10px 20px;\n    border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    span:first-child {\n        font-size: 10px;\n        font-weight: 400;\n        text-transform: uppercase;\n        margin-bottom: 5px;\n    }\n`;\nconst Description = styled.p`\n    margin: 20px 0px;\n`;\nconst Tabs = styled.div`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    margin: 25px 0px;\n    gap: 10px;\n`;\nconst Tab = styled.span<{ isActive: boolean }>`\n    text-align: center;\n    text-transform: uppercase;\n    font-size: 12px;\n    font-weight: 400;\n    background-color: rgba(0, 0, 0, 0.5);\n    padding: 7px 0px;\n    border-radius: 10px;\n    color: ${(props) =>\n        props.isActive ? props.theme.accentColor : props.theme.textColor};\n    a {\n        display: block;\n    }\n`;\ninterface RouteParams {\n    coinId: string;\n}\n\ninterface LocationState {\n    state: {\n        name: string;\n        rank: number;\n    };\n}\ninterface ITag {\n    coin_counter: number;\n    ico_counter: number;\n    id: string;\n    name: string;\n}\ninterface InfoData {\n    id: string;\n    name: string;\n    symbol: string;\n    rank: number;\n    is_new: boolean;\n    is_active: boolean;\n    type: string;\n    logo: string;\n    tags: ITag[];\n    team: object;\n    description: string;\n    message: string;\n    open_source: boolean;\n    started_at: string;\n    development_status: string;\n    hardware_wallet: boolean;\n    proof_type: string;\n    org_structure: string;\n    hash_algorithm: string;\n    whitepaper: object;\n    first_data_at: string;\n    last_data_at: string;\n}\n\ninterface PriceData {\n    id: string;\n    name: string;\n    symbol: string;\n    rank: string;\n    circulating_supply: string;\n    total_supply: string;\n    max_supply: string;\n    beta_value: string;\n    first_data_at: string;\n    last_updated: string;\n    quotes: {\n        USD: {\n            ath_date: string;\n            ath_price: number;\n            market_cap: number;\n            market_cap_change_24h: number;\n            percent_change_1h: number;\n            percent_change_1y: number;\n            percent_change_6h: number;\n            percent_change_7d: number;\n            cent_change_12h: number;\n            percent_change_15m: number;\n            percent_change_24h: number;\n            percent_change_30d: number;\n            percent_change_30m: number;\n            percent_from_price_ath: number;\n            price: number;\n            volume_24h: number;\n            volume_24h_change_24h: number;\n        };\n    };\n}\n\nfunction Coin() {\n    // const [loading, setLoading] = useState(true);\n    // const location = useLocation();\n    const { coinId } = useParams() as unknown as RouteParams;\n    const { state } = useLocation() as LocationState;\n\n    // const [info, setInfo] = useState<InfoData>();\n    // const [priceInfo, setPriceInfo] = useState<PriceData>();\n    const priceMatch = useMatch(\"/:coinId/price\");\n    const chartMatch = useMatch(\"/:coinId/chart\");\n    //useMatch는 유저가 특정한 url에 있는지 여부를 알려준다.\n\n    // useEffect(() => {\n    //     (async () => {\n    //         const infoData = await (\n    //             await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n    //         ).json();\n    //         const priceData = await (\n    //             await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n    //         ).json();\n    //         setInfo(infoData);\n    //         setPriceInfo(priceData);\n    //         setLoading(false);\n    //     })();\n    // }, [coinId]);\n\n    const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n        [\"info\", coinId],\n        () => fetchCoinInfo(coinId)\n    );\n    const { isLoading: tickerLoading, data: tickersData } = useQuery<PriceData>(\n        [\"tickers\", coinId],\n        () => fetchCoinTickers(coinId)\n    );\n    //모든 쿼리 키는 유니크한 값을 갖는게 좋다.\n    //isLoading:infoLoading (이름을 isloading에서 infoLoading으로 바꾼다)\n\n    const loading = infoLoading || tickerLoading;\n\n    return (\n        <Container>\n            <HelmetProvider>\n                <Helmet>\n                    <title>{state || coinId} </title>\n                </Helmet>\n            </HelmetProvider>\n            <Header>\n                <Title> {state || coinId} </Title>\n            </Header>\n            {loading ? (\n                <Loader>Loading...</Loader>\n            ) : (\n                <>\n                    <Overview>\n                        <OverviewItem>\n                            <span>Rank:</span>\n                            <span>{infoData?.rank}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Symbol:</span>\n                            <span>${infoData?.symbol}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Price:</span>\n                            <span>\n                                {tickersData?.quotes.USD.price.toFixed(3)}\n                            </span>\n                            {/* <span>{infoData?.open_source ? \"Yes\" : \"No\"}</span> */}\n                        </OverviewItem>\n                    </Overview>\n                    <Description>{infoData?.description}</Description>\n                    <Overview>\n                        <OverviewItem>\n                            <span>Total Suply:</span>\n                            <span>{tickersData?.total_supply}</span>\n                        </OverviewItem>\n                        <OverviewItem>\n                            <span>Max Supply:</span>\n                            <span>{tickersData?.max_supply}</span>\n                        </OverviewItem>\n                    </Overview>\n\n                    <Tabs>\n                        <Tab isActive={chartMatch !== null}>\n                            <Link to={`/${coinId}/chart`}>\n                            CHART <Chart coinId={coinId} /> \n                            </Link>\n                        </Tab>\n\n                        <Tab isActive={priceMatch !== null}>\n                            <Link to={`/${coinId}/price`}>\n                             PRICe <Price coinId={coinId} />\n                            </Link>\n                        </Tab>\n\n                        <Tab isActive={priceMatch !== null || chartMatch !== null} >\n                        <Link to={\"/\"}>\n                                HOME \n                            </Link>\n                        </Tab>\n                    </Tabs>\n\n                    <Routes>\n                        <Route path={`/${coinId}/price`} element={<Price coinId={coinId} />} />\n                        <Route\n                            path={`/${coinId}/chart`}\n                            element={<Chart coinId={coinId} />}\n                        />\n                    </Routes>\n                </>\n            )}\n        </Container>\n    );\n}\nexport default Coin;\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n// import { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoins } from \"../api\";\nimport {Helmet} from \"react-helmet\";\nimport { HelmetProvider } from \"react-helmet-async\";\n\nconst Container = styled.div`\n    padding: 0px 20px;\n    max-width: 480px;\n    margin: 0 auto;\n`;\nconst Header = styled.header`\n    height: 15vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\nconst CoinsList = styled.ul``;\nconst Coin = styled.li`\n    background-color: white;\n    color: #2f3640;\n    border-radius: 15px;\n    margin-bottom: 10px;\n    a {\n        padding: 20px;\n        transition: color 0.2s ease-in;\n        display: block;\n    }\n    &:hover {\n        a {\n            color: ${(props) => props.theme.accentColor};\n        }\n    }\n`;\nconst Title = styled.h1`\n    font-size: 48px;\n    color: ${(props) => props.theme.accentColor};\n`;\nconst Loader = styled.span`\n    font-size: 30px;\n    text-align: center;\n    display: block;\n`;\nconst Img = styled.img`\n    width: 40px;\n    height: 40px;\n    margin-right: 10px;\n`;\n\ninterface ICoin {\n    id: string;\n    name: string;\n    symbol: string;\n    rank: number;\n    is_new: boolean;\n    is_active: boolean;\n    type: string;\n}\n\nfunction Coins() {\n    // const [coins, setCoins] = useState<CoinInterface[]>([]);\n    // const [loading, setLoading] = useState(true);\n    // //useEffect로 특정한 시기에만 코드를 실행하게 할 수 있엇찌!\n    // useEffect(() => {\n    //     (async () => { //-> 여기부터는 api.tsx로 넘어감\n    //         const response = await fetch(\n    //             \"https://api.coinpaprika.com/v1/coins\"\n    //         );\n    //         const json = await response.json();\n    //         setCoins(json.slice(0, 100));\n    //         setLoading(false);\n    //     })();\n    // }, []);\n\n    const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n    \n    return (\n        <Container>\n            <Header>\n                <HelmetProvider>\n            <Helmet><title> Coins </title></Helmet></HelmetProvider>\n                <Title> Coins </Title>\n            </Header>\n            {isLoading ? (\n                <Loader> Loading... </Loader>\n            ) : (\n                <CoinsList>\n                    {data?.slice(0, 100).map((coin) => (\n                        <Coin key={coin.id}>\n                            <Link to={`/${coin.id}`} state={coin.name}>\n                                <Img\n                                    src={`https://coinicons-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}></Img>\n                                {coin.name} &rarr;\n                            </Link>\n                        </Coin>\n                    ))}\n                </CoinsList>\n            )}\n        </Container>\n    );\n}\nexport default Coins;\n\n//Link는 페이지 리렌더링을 하지 않는다.\n// a href=\"\" 페이지 렌더링을 해서 여기서는 사용하지 않음\n","import React from \"react\";\nimport {\n    BrowserRouter,\n    Routes,\n    Route,\n} from \"react-router-dom\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\nimport env from \"dotenv\";\n\n// const Router = createBrowserRouter([\n//     {\n//         path: \"/\",\n//         element: <Coins />,\n//     },\n//     {\n//         path: \"/:coinId\",\n//         element: <Coin />,\n//         children: [\n//             {\n//                 path: \"chart\",\n//                 element: <Chart />,\n//             },\n//             {\n//                 path: \"price\",\n//                 element: <Price />,\n//             },\n//         ],\n//     },\n// ]);\n\n// export default Router;\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Routes> // 하나의 라우터를 렌더링 할 수 있다. \n        <Route path={`${process.env.PUBLIC_URL}/:coinId`}  element={<Coin />}/>\n        <Route path={`${process.env.PUBLIC_URL}/`} element={<Coins />}/>\n        <Route path={`${process.env.PUBLIC_URL}/:coinId/chart`} element={<Coin />}/>\n        {/* <Route path=\"/:coinId/price\" element={<Coin />}/> */}\n        <Route path={`${process.env.PUBLIC_URL}/:coinId/price`} element={<Coin />}/>\n\n        </Routes>\n    </BrowserRouter>\n  );\n}\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darktheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"#607D8B\",  //#f5f6fa\n  accentColor: \"#009688\",\n};\n\nexport const lighttheme: DefaultTheme = {\n  bgColor: \"#f5f6fa\",\n  textColor: \"#FDD835\",\n  accentColor: \"#E91E63\",\n};\n\nexport const backtheme = {darktheme, lighttheme}","// 컴포넌트 정의하는 프로그램으로 실제로 화면에 표시되는 내용은 여기서 정의된다.\n\nimport React, { useState } from \"react\";\nimport styled, {\n    createGlobalStyle,\n    css,\n    ThemeProvider,\n} from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darktheme, lighttheme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box; \n}\nbody {\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor}\n}\na {\n  text-decoration:none;\n  color: inherit;\n}\n`;\n\nconst ThemeSwitchBtn = styled.button`\n    grid-template-columns: repeat(2, 1fr);\n    gap: 10px;\n    border-radius: 10px;\n    border: 3px;\n    align-items: center;\n    &:hover {\n        color: ${(props) => props.theme.accentColor};\n    }\n`;\n\nfunction App() {\n    const [theme, setTheme] = useState(lighttheme);\n\n    const switchTheme = () => {\n        const currentTheme = theme === lighttheme ? darktheme : lighttheme;\n        setTheme(currentTheme);\n    };\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <GlobalStyle />\n                <ThemeSwitchBtn\n                    onClick={() => {\n                        switchTheme();\n                    }}>\n                    Change Theme\n                </ThemeSwitchBtn>\n                <Router />\n                <ReactQueryDevtools initialIsOpen={true} />\n            </ThemeProvider>\n        </>\n    );\n}\n\nexport default App;\n","//html 템플렛 및 js 컴포넌트를 조합하여 렌더링하고 실제로 표시한다. \n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darktheme, lighttheme } from \"./theme\";\n\n// const rootElement = document.getElementById('root');\n// if (!rootElement) throw new Error('Failed to find the root element');\n// const root = ReactDOM.createRoot(rootElement); -> 이거 v5일때인가? 그러면 root.render로 아래도 바뀌어야함\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <React.StrictMode>\n        <QueryClientProvider client={queryClient}>\n            {/* <ThemeProvider theme={lighttheme}> */}\n                <App />\n            {/* </ThemeProvider> */}\n        </QueryClientProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}